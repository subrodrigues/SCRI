package javav;

//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2014-05-15 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "D:\\FEUP\\4o_Ano\\2o_Semestre\\SCRI\\Variant_Forma_Methods\\TASVariant/ATInput.vdmpp".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.List;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class ATInput implements EvaluatePP {

// ***** VDMTOOLS START Name=s1 KEEP=NO
  public volatile Sensor s1 = null;
// ***** VDMTOOLS END Name=s1

// ***** VDMTOOLS START Name=s2 KEEP=NO
  public volatile Sensor s2 = null;
// ***** VDMTOOLS END Name=s2

// ***** VDMTOOLS START Name=s3 KEEP=NO
  public volatile Sensor s3 = null;
// ***** VDMTOOLS END Name=s3

// ***** VDMTOOLS START Name=dra1 KEEP=NO
  private volatile DRA1 dra1 = null;
// ***** VDMTOOLS END Name=dra1

// ***** VDMTOOLS START Name=dra2 KEEP=NO
  private volatile DRA2 dra2 = null;
// ***** VDMTOOLS END Name=dra2

// ***** VDMTOOLS START Name=dra3 KEEP=NO
  private volatile DRA3 dra3 = null;
// ***** VDMTOOLS END Name=dra3

// ***** VDMTOOLS START Name=voter KEEP=NO
  private volatile Voter voter = null;
// ***** VDMTOOLS END Name=voter

// ***** VDMTOOLS START Name=atOutput KEEP=NO
  private volatile ATOutput atOutput = null;
// ***** VDMTOOLS END Name=atOutput

// ***** VDMTOOLS START Name=lastFailedS1 KEEP=NO
  private volatile Number lastFailedS1 = null;
// ***** VDMTOOLS END Name=lastFailedS1

// ***** VDMTOOLS START Name=lastFailedS2 KEEP=NO
  private volatile Number lastFailedS2 = null;
// ***** VDMTOOLS END Name=lastFailedS2

// ***** VDMTOOLS START Name=lastFailedS3 KEEP=NO
  private volatile Number lastFailedS3 = null;
// ***** VDMTOOLS END Name=lastFailedS3

// ***** VDMTOOLS START Name=round KEEP=NO
  private volatile Number round = null;
// ***** VDMTOOLS END Name=round

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=ATInputSentinel KEEP=NO
  class ATInputSentinel extends Sentinel {

    public final int read = 0;

    public final int ATInput = 1;

    public final int validateMean = 2;

    public final int nr_functions = 3;


    public ATInputSentinel () throws CGException {}


    public ATInputSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=ATInputSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new ATInputSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=TRANSIENT_IGNORE KEEP=NO
  private static final Number TRANSIENT_IGNORE = new Integer(5);
// ***** VDMTOOLS END Name=TRANSIENT_IGNORE

// ***** VDMTOOLS START Name=ERROR KEEP=NO
  private static final Number ERROR = new Integer(-1);
// ***** VDMTOOLS END Name=ERROR


// ***** VDMTOOLS START Name=vdm_init_ATInput KEEP=NO
  private void vdm_init_ATInput () {
    try {
      setSentinel();
      s1 = new Sensor();
      s2 = new Sensor();
      s3 = new Sensor();
      dra1 = new DRA1();
      dra2 = new DRA2();
      dra3 = new DRA3();
      voter = new Voter();
      atOutput = new ATOutput();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_ATInput


// ***** VDMTOOLS START Name=ATInput KEEP=NO
  public ATInput () throws CGException {
    try {
      vdm_init_ATInput();
      lastFailedS1 = new Integer(TRANSIENT_IGNORE.intValue() * -1);
      lastFailedS2 = new Integer(TRANSIENT_IGNORE.intValue() * -1);
      lastFailedS3 = new Integer(TRANSIENT_IGNORE.intValue() * -1);
      round = new Integer(0);
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=ATInput


// ***** VDMTOOLS START Name=read#9|Number|Number|Number|Number|Number|Number|Number|Number|Number KEEP=NO
  public Number read (final Number pe1, final Number pd1, final Number t1, final Number pe2, final Number pd2, final Number t2, final Number pe3, final Number pd3, final Number t3) throws CGException {
    sentinel.entering(((ATInputSentinel)sentinel).read);
    try {
      Boolean s1Validity = Boolean.TRUE;
      Boolean s2Validity = Boolean.TRUE;
      Boolean s3Validity = Boolean.TRUE;
      Boolean s1Add = Boolean.FALSE;
      Boolean s2Add = Boolean.FALSE;
      Boolean s3Add = Boolean.FALSE;
      List voterVals = new ArrayList();
      round = new Integer(round.intValue() + 1);
      if (s1.getFails().intValue() < 2) 
        s1.read(pe1, pd1, t1);
      if (s2.getFails().intValue() < 2) 
        s2.read(pe2, pd2, t2);
      if (s3.getFails().intValue() < 2) 
        s3.read(pe3, pd3, t3);
      Boolean cond_34 = null;
      if ((cond_34 = Boolean.valueOf(s1.getFails().intValue() < 2)).booleanValue()) 
        cond_34 = Boolean.valueOf((round.intValue() - lastFailedS1.intValue()) > TRANSIENT_IGNORE.intValue());
      if (cond_34.booleanValue()) {
        s1Validity = (Boolean)UTIL.clone(s1.validate());
        s1Add = (Boolean)UTIL.clone(s1Validity);
      }
      Boolean cond_45 = null;
      if ((cond_45 = Boolean.valueOf(s2.getFails().intValue() < 2)).booleanValue()) 
        cond_45 = Boolean.valueOf((round.intValue() - lastFailedS2.intValue()) > TRANSIENT_IGNORE.intValue());
      if (cond_45.booleanValue()) {
        s2Validity = (Boolean)UTIL.clone(s2.validate());
        s2Add = (Boolean)UTIL.clone(s2Validity);
      }
      Boolean cond_56 = null;
      if ((cond_56 = Boolean.valueOf(s3.getFails().intValue() < 2)).booleanValue()) 
        cond_56 = Boolean.valueOf((round.intValue() - lastFailedS3.intValue()) > TRANSIENT_IGNORE.intValue());
      if (cond_56.booleanValue()) {
        s3Validity = (Boolean)UTIL.clone(s3.validate());
        s3Add = (Boolean)UTIL.clone(s3Validity);
      }
      Boolean cond_67 = null;
      if ((cond_67 = Boolean.valueOf(s1.getFails().intValue() < 2)).booleanValue()) 
        cond_67 = Boolean.valueOf(!s1Validity.booleanValue());
      if (cond_67.booleanValue()) 
        lastFailedS1 = UTIL.NumberToInt(UTIL.clone(round));
      Boolean cond_74 = null;
      if ((cond_74 = Boolean.valueOf(s2.getFails().intValue() < 2)).booleanValue()) 
        cond_74 = Boolean.valueOf(!s2Validity.booleanValue());
      if (cond_74.booleanValue()) 
        lastFailedS2 = UTIL.NumberToInt(UTIL.clone(round));
      Boolean cond_81 = null;
      if ((cond_81 = Boolean.valueOf(s3.getFails().intValue() < 2)).booleanValue()) 
        cond_81 = Boolean.valueOf(!s3Validity.booleanValue());
      if (cond_81.booleanValue()) 
        lastFailedS3 = UTIL.NumberToInt(UTIL.clone(round));
      Boolean cond_88 = null;
      if ((cond_88 = s1Add).booleanValue()) 
        cond_88 = validateMean(s1, s2Add, s3Add, s2, s3);
      if (cond_88.booleanValue()) {
    	  System.out.println("Sensor 1 active!");
        voterVals.add(dra1.getResult(pe1, pd1, t1));
      }
      else {
        Boolean cond_96 = null;
        if ((cond_96 = s1Add).booleanValue()) 
          cond_96 = Boolean.valueOf(!validateMean(s1, s2Add, s3Add, s2, s3).booleanValue());
        if (cond_96.booleanValue()) {
          lastFailedS1 = UTIL.NumberToInt(UTIL.clone(round));
          s1Validity = Boolean.FALSE;
          System.err.println("Sensor 1 failed!");
          s1.afterFail();
        }
      }
      Boolean cond_112 = null;
      if ((cond_112 = s2Add).booleanValue()) 
        cond_112 = validateMean(s2, s1Add, s3Add, s1, s3);
      if (cond_112.booleanValue()) {
    	  System.out.println("Sensor 2 active!");
        voterVals.add(dra2.getResult(pe2, pd2, t2));
      }
      else {
        Boolean cond_120 = null;
        if ((cond_120 = s2Add).booleanValue()) 
          cond_120 = Boolean.valueOf(!validateMean(s2, s1Add, s3Add, s1, s3).booleanValue());
        if (cond_120.booleanValue()) {
          lastFailedS2 = UTIL.NumberToInt(UTIL.clone(round));
          s2Validity = Boolean.FALSE;
          System.err.println("Sensor 2 failed!");
          s2.afterFail();
        }
      }
      Boolean cond_136 = null;
      if ((cond_136 = s3Add).booleanValue()) 
        cond_136 = validateMean(s3, s2Add, s1Add, s2, s1);
      if (cond_136.booleanValue()) {
    	  System.out.println("Sensor 3 active!");
        voterVals.add(dra3.getResult(pe3, pd3, t3));
      }
      else {
        Boolean cond_144 = null;
        if ((cond_144 = s3Add).booleanValue()) 
          cond_144 = Boolean.valueOf(!validateMean(s3, s2Add, s1Add, s2, s1).booleanValue());
        if (cond_144.booleanValue()) {
          lastFailedS3 = UTIL.NumberToInt(UTIL.clone(round));
          s3Validity = Boolean.FALSE;
          System.err.println("Sensor 3 failed!");
          s3.afterFail();
        }
      }
      Boolean cond_160 = null;
      Boolean var1_161 = null;
      if ((var1_161 = Boolean.valueOf(!s1Validity.booleanValue())).booleanValue()) 
        var1_161 = Boolean.valueOf(!s2Validity.booleanValue());
      if ((cond_160 = var1_161).booleanValue()) 
        cond_160 = Boolean.valueOf(!s3Validity.booleanValue());
      if (cond_160.booleanValue()) 
        return ERROR;
      if (atOutput.validate(voter.vote(voterVals)).booleanValue()) 
        return voter.vote(voterVals);
      else 
        return ERROR;
    }
    finally {
      sentinel.leaving(((ATInputSentinel)sentinel).read);
    }
  }
// ***** VDMTOOLS END Name=read#9|Number|Number|Number|Number|Number|Number|Number|Number|Number


// ***** VDMTOOLS START Name=validateMean#5|Sensor|Boolean|Boolean|Sensor|Sensor KEEP=NO
  private Boolean validateMean (final Sensor toValid, final Boolean add1, final Boolean add2, final Sensor se1, final Sensor se2) throws CGException {
    sentinel.entering(((ATInputSentinel)sentinel).validateMean);
    try {
      Number sumPe = UTIL.NumberToReal(new Double(0));
      Number sumPd = UTIL.NumberToReal(new Double(0));
      Number sumT = UTIL.NumberToReal(new Double(0));
      Number nPe = new Integer(0);
      Number nPd = new Integer(0);
      Number nT = new Integer(0);
      Number meanPe = UTIL.NumberToReal(new Double(0));
      Number meanPd = UTIL.NumberToReal(new Double(0));
      Number meanT = UTIL.NumberToReal(new Double(0));
      if (add1.booleanValue()) {
        sumPe = new Double(sumPe.doubleValue() + (se1.pe).doubleValue());
        nPe = new Integer(nPe.intValue() + 1);
        sumT = new Double(sumT.doubleValue() + (se1.t).doubleValue());
        nT = new Integer(nT.intValue() + 1);
        sumPd = new Double(sumPd.doubleValue() + (se1.pd).doubleValue());
        nPd = new Integer(nPd.intValue() + 1);
      }
      if (add2.booleanValue()) {
        sumPe = new Double(sumPe.doubleValue() + (se2.pe).doubleValue());
        nPe = new Integer(nPe.intValue() + 1);
        sumT = new Double(sumT.doubleValue() + (se2.t).doubleValue());
        nT = new Integer(nT.intValue() + 1);
        sumPd = new Double(sumPd.doubleValue() + (se2.pd).doubleValue());
        nPd = new Integer(nPd.intValue() + 1);
      }
      meanPe = new Double(sumPe.doubleValue() / nPe.doubleValue());
      meanPd = new Double(sumPd.doubleValue() / nPd.doubleValue());
      meanT = new Double(sumT.doubleValue() / nT.doubleValue());
      Boolean cond_59 = null;
      if (!(cond_59 = Boolean.valueOf((toValid.pe).doubleValue() < (meanPe.doubleValue() - (0.2 * meanPe.doubleValue())))).booleanValue()) 
        cond_59 = Boolean.valueOf((toValid.pe).doubleValue() > (meanPe.doubleValue() + (0.2 * meanPe.doubleValue())));
      if (cond_59.booleanValue()) 
        return Boolean.FALSE;
      Boolean cond_77 = null;
      if (!(cond_77 = Boolean.valueOf((toValid.pd).doubleValue() < (meanPd.doubleValue() - (0.2 * meanPd.doubleValue())))).booleanValue()) 
        cond_77 = Boolean.valueOf((toValid.pd).doubleValue() > (meanPd.doubleValue() + (0.2 * meanPd.doubleValue())));
      if (cond_77.booleanValue()) 
        return Boolean.FALSE;
      Boolean cond_95 = null;
      if (!(cond_95 = Boolean.valueOf((toValid.t).doubleValue() < (meanT.doubleValue() - (0.2 * meanT.doubleValue())))).booleanValue()) 
        cond_95 = Boolean.valueOf((toValid.t).doubleValue() > (meanT.doubleValue() + (0.2 * meanT.doubleValue())));
      if (cond_95.booleanValue()) 
        return Boolean.FALSE;
      return Boolean.TRUE;
    }
    finally {
      sentinel.leaving(((ATInputSentinel)sentinel).validateMean);
    }
  }
// ***** VDMTOOLS END Name=validateMean#5|Sensor|Boolean|Boolean|Sensor|Sensor

}
;
