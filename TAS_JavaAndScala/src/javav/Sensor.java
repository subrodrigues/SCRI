package javav;

//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2014-05-15 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "D:\\FEUP\\4o_Ano\\2o_Semestre\\SCRI\\Variant_Forma_Methods\\TASVariant/Sensor.vdmpp".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Set;
import java.util.List;
import java.util.HashSet;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Sensor implements EvaluatePP {

// ***** VDMTOOLS START Name=pe KEEP=NO
  public volatile Number pe = null;
// ***** VDMTOOLS END Name=pe

// ***** VDMTOOLS START Name=pd KEEP=NO
  public volatile Number pd = null;
// ***** VDMTOOLS END Name=pd

// ***** VDMTOOLS START Name=t KEEP=NO
  public volatile Number t = null;
// ***** VDMTOOLS END Name=t

// ***** VDMTOOLS START Name=peHistory KEEP=NO
  private volatile List peHistory = null;
// ***** VDMTOOLS END Name=peHistory

// ***** VDMTOOLS START Name=pdHistory KEEP=NO
  private volatile List pdHistory = null;
// ***** VDMTOOLS END Name=pdHistory

// ***** VDMTOOLS START Name=tHistory KEEP=NO
  private volatile List tHistory = null;
// ***** VDMTOOLS END Name=tHistory

// ***** VDMTOOLS START Name=history KEEP=NO
  private volatile List history = null;
// ***** VDMTOOLS END Name=history

// ***** VDMTOOLS START Name=round KEEP=NO
  private volatile Number round = null;
// ***** VDMTOOLS END Name=round

// ***** VDMTOOLS START Name=fails KEEP=NO
  private volatile Number fails = null;
// ***** VDMTOOLS END Name=fails

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=SensorSentinel KEEP=NO
  class SensorSentinel extends Sentinel {

    public final int read = 0;

    public final int sumT = 1;

    public final int meanT = 2;

    public final int sumPd = 3;

    public final int sumPe = 4;

    public final int Sensor = 5;

    public final int failed = 6;

    public final int meanPd = 7;

    public final int meanPe = 8;

    public final int getFails = 9;

    public final int validate = 10;

    public final int afterFail = 11;

    public final int checkVariance = 12;

    public final int nr_functions = 13;


    public SensorSentinel () throws CGException {}


    public SensorSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=SensorSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new SensorSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=OMISSION KEEP=NO
  private static final Number OMISSION = new Integer(-1);
// ***** VDMTOOLS END Name=OMISSION

// ***** VDMTOOLS START Name=PRESSURE_LOW KEEP=NO
  private static final Number PRESSURE_LOW = new Integer(100);
// ***** VDMTOOLS END Name=PRESSURE_LOW

// ***** VDMTOOLS START Name=PRESSURE_MAX KEEP=NO
  private static final Number PRESSURE_MAX = new Integer(1500);
// ***** VDMTOOLS END Name=PRESSURE_MAX

// ***** VDMTOOLS START Name=TEMPERATURE_LOW KEEP=NO
  private static final Number TEMPERATURE_LOW = new Integer(200);
// ***** VDMTOOLS END Name=TEMPERATURE_LOW

// ***** VDMTOOLS START Name=TEMPERATURE_MAX KEEP=NO
  private static final Number TEMPERATURE_MAX = new Integer(300);
// ***** VDMTOOLS END Name=TEMPERATURE_MAX

// ***** VDMTOOLS START Name=STUCK_AT KEEP=NO
  private static final Number STUCK_AT = new Integer(4);
// ***** VDMTOOLS END Name=STUCK_AT

// ***** VDMTOOLS START Name=MAX_FAILS KEEP=NO
  private static final Number MAX_FAILS = new Integer(2);
// ***** VDMTOOLS END Name=MAX_FAILS

// ***** VDMTOOLS START Name=TRANSIENT_IGNORE KEEP=NO
  private static final Number TRANSIENT_IGNORE = new Integer(5);
// ***** VDMTOOLS END Name=TRANSIENT_IGNORE

// ***** VDMTOOLS START Name=PRESSURE_VARIANCE KEEP=NO
  private static final Number PRESSURE_VARIANCE = new Integer(100);
// ***** VDMTOOLS END Name=PRESSURE_VARIANCE

// ***** VDMTOOLS START Name=TEMPERATURE_VARIANCE KEEP=NO
  private static final Number TEMPERATURE_VARIANCE = new Integer(50);
// ***** VDMTOOLS END Name=TEMPERATURE_VARIANCE


// ***** VDMTOOLS START Name=vdm_init_Sensor KEEP=NO
  private void vdm_init_Sensor () {
    try {
      setSentinel();
      peHistory = new ArrayList();
      pdHistory = new ArrayList();
      tHistory = new ArrayList();
      history = new ArrayList();
      fails = new Integer(0);
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Sensor


// ***** VDMTOOLS START Name=inv_Sensor KEEP=NO
  public Boolean inv_Sensor () {
    Boolean rexpr_4 = null;
    if ((rexpr_4 = Boolean.valueOf(fails.intValue() <= MAX_FAILS.intValue())).booleanValue()) {
      Boolean var2_8 = null;
      if ((var2_8 = Boolean.valueOf(peHistory.size() == pdHistory.size())).booleanValue()) 
        var2_8 = Boolean.valueOf(peHistory.size() == tHistory.size());
      rexpr_4 = var2_8;
    }
    return rexpr_4;
  }
// ***** VDMTOOLS END Name=inv_Sensor


// ***** VDMTOOLS START Name=Sensor KEEP=NO
  public Sensor () throws CGException {
    try {
      vdm_init_Sensor();
      pe = UTIL.NumberToReal(UTIL.clone(OMISSION));
      pd = UTIL.NumberToReal(UTIL.clone(OMISSION));
      t = UTIL.NumberToReal(UTIL.clone(OMISSION));
      List rhs_5 = new ArrayList();
      if (!(((Object)rhs_5) instanceof List)) 
        UTIL.RunTime("Incompatible type");
      peHistory = UTIL.ConvertToList(UTIL.clone(rhs_5));
      List rhs_7 = new ArrayList();
      if (!(((Object)rhs_7) instanceof List)) 
        UTIL.RunTime("Incompatible type");
      pdHistory = UTIL.ConvertToList(UTIL.clone(rhs_7));
      List rhs_9 = new ArrayList();
      if (!(((Object)rhs_9) instanceof List)) 
        UTIL.RunTime("Incompatible type");
      tHistory = UTIL.ConvertToList(UTIL.clone(rhs_9));
      List rhs_11 = new ArrayList();
      if (!(((Object)rhs_11) instanceof List)) 
        UTIL.RunTime("Incompatible type");
      history = UTIL.ConvertToList(UTIL.clone(rhs_11));
      fails = new Integer(0);
      round = new Integer(0);
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Sensor


// ***** VDMTOOLS START Name=getFails KEEP=NO
  public Number getFails () throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).getFails);
    try {
      return fails;
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).getFails);
    }
  }
// ***** VDMTOOLS END Name=getFails


// ***** VDMTOOLS START Name=read#3|Number|Number|Number KEEP=NO
  public void read (final Number e, final Number d, final Number te) throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).read);
    try {
      if (!this.pre_read(e, d, te).booleanValue()) 
        UTIL.RunTime("Precondition failure in read");
      round = new Integer(round.intValue() + 1);
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
      pe = UTIL.NumberToReal(UTIL.clone(e));
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
      pd = UTIL.NumberToReal(UTIL.clone(d));
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
      t = UTIL.NumberToReal(UTIL.clone(te));
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
      {
        List atom_1_12 = null;
        List tmpSeq_14 = new ArrayList();
        tmpSeq_14.add(pe);
        atom_1_12 = new ArrayList(tmpSeq_14);
        atom_1_12.addAll(peHistory);
        final List atom_1 = atom_1_12;
        List atom_2_18 = null;
        List tmpSeq_20 = new ArrayList();
        tmpSeq_20.add(pd);
        atom_2_18 = new ArrayList(tmpSeq_20);
        atom_2_18.addAll(pdHistory);
        final List atom_2 = atom_2_18;
        List atom_3_24 = null;
        List tmpSeq_26 = new ArrayList();
        tmpSeq_26.add(t);
        atom_3_24 = new ArrayList(tmpSeq_26);
        atom_3_24.addAll(tHistory);
        final List atom_3 = atom_3_24;
        List atom_4_30 = null;
        List tmpSeq_32 = new ArrayList();
        tmpSeq_32.add(new quotes.NOTVALIDATED());
        atom_4_30 = new ArrayList(tmpSeq_32);
        atom_4_30.addAll(history);
        final List atom_4 = atom_4_30;
        peHistory = UTIL.ConvertToList(UTIL.clone(atom_1));
        pdHistory = UTIL.ConvertToList(UTIL.clone(atom_2));
        tHistory = UTIL.ConvertToList(UTIL.clone(atom_3));
        history = UTIL.ConvertToList(UTIL.clone(atom_4));
      }
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).read);
    }
  }
// ***** VDMTOOLS END Name=read#3|Number|Number|Number


// ***** VDMTOOLS START Name=pre_read#3|Number|Number|Number KEEP=NO
  public Boolean pre_read (final Number e, final Number d, final Number te) throws CGException {
    return Boolean.valueOf(fails.intValue() < MAX_FAILS.intValue());
  }
// ***** VDMTOOLS END Name=pre_read#3|Number|Number|Number


// ***** VDMTOOLS START Name=validate KEEP=NO
  public Boolean validate () throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).validate);
    try {
      if (!this.pre_validate().booleanValue()) 
        UTIL.RunTime("Precondition failure in validate");
      Boolean cond_1 = null;
      Boolean var1_2 = null;
      Boolean var1_3 = null;
      if (!(var1_3 = Boolean.valueOf(pe.doubleValue() < PRESSURE_LOW.intValue())).booleanValue()) 
        var1_3 = Boolean.valueOf(pe.doubleValue() > PRESSURE_MAX.intValue());
      if (!(var1_2 = var1_3).booleanValue()) 
        var1_2 = Boolean.valueOf(pd.doubleValue() < PRESSURE_LOW.intValue());
      if (!(cond_1 = var1_2).booleanValue()) 
        cond_1 = Boolean.valueOf(pd.doubleValue() > PRESSURE_MAX.intValue());
      if (cond_1.booleanValue()) {
    	  System.err.println("Invalid prressure!");
        return failed();
      }
      Boolean cond_17 = null;
      if (!(cond_17 = Boolean.valueOf(t.doubleValue() < TEMPERATURE_LOW.intValue())).booleanValue()) 
        cond_17 = Boolean.valueOf(t.doubleValue() > TEMPERATURE_MAX.intValue());
      if (cond_17.booleanValue()) 
        return failed();
      Boolean cond_25 = null;
      Boolean var1_26 = null;
      Boolean var1_27 = null;
      if ((var1_27 = Boolean.valueOf(peHistory.size() > 1)).booleanValue()) 
        var1_27 = Boolean.valueOf(pdHistory.size() > 1);
      if ((var1_26 = var1_27).booleanValue()) 
        var1_26 = Boolean.valueOf(tHistory.size() > 1);
      if ((cond_25 = var1_26).booleanValue()) 
        cond_25 = Boolean.valueOf(!checkVariance().booleanValue());
      if (cond_25.booleanValue()) {
    	  System.err.println("Invalid variance!");
        return Boolean.FALSE;
      }
      Boolean cond_43 = null;
      if ((cond_43 = Boolean.valueOf(peHistory.size() >= STUCK_AT.intValue())).booleanValue()) 
        cond_43 = allEqual(lastN(peHistory, STUCK_AT));
      if (cond_43.booleanValue()) {
    	  System.err.println("Stuck at pe!");
        return failed();
      }
      Boolean cond_53 = null;
      if ((cond_53 = Boolean.valueOf(pdHistory.size() >= STUCK_AT.intValue())).booleanValue()) 
        cond_53 = allEqual(lastN(pdHistory, STUCK_AT));
      if (cond_53.booleanValue()) {
    	  System.err.println("Stuck at pd!");
        return failed();
      }
      Boolean cond_63 = null;
      if ((cond_63 = Boolean.valueOf(tHistory.size() >= STUCK_AT.intValue())).booleanValue()) 
        cond_63 = allEqual(lastN(tHistory, STUCK_AT));
      if (cond_63.booleanValue()) {
    	  System.err.println("Stuck at t!");
        return failed();
      }
      history = new ArrayList(history.subList(1, history.size()));
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
      List rhs_75 = null;
      List tmpSeq_77 = new ArrayList();
      tmpSeq_77.add(new quotes.OK());
      rhs_75 = new ArrayList(tmpSeq_77);
      rhs_75.addAll(history);
      history = UTIL.ConvertToList(UTIL.clone(rhs_75));
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
      return Boolean.TRUE;
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).validate);
    }
  }
// ***** VDMTOOLS END Name=validate


// ***** VDMTOOLS START Name=pre_validate KEEP=NO
  public Boolean pre_validate () throws CGException {
    return Boolean.valueOf(fails.intValue() < MAX_FAILS.intValue());
  }
// ***** VDMTOOLS END Name=pre_validate


// ***** VDMTOOLS START Name=checkVariance KEEP=NO
  private Boolean checkVariance () throws CGException {
	    sentinel.entering(((SensorSentinel)sentinel).checkVariance);
	    try {
	      if (!this.pre_checkVariance().booleanValue()) 
	        UTIL.RunTime("Precondition failure in checkVariance");
	      if (!UTIL.equals(new ArrayList(history.subList(1, history.size())).get(0), new quotes.OK())) 
	        return Boolean.TRUE;
	      Boolean cond_7 = null;
	      if (!(cond_7 = Boolean.valueOf(Math.abs((UTIL.NumberToReal(new ArrayList(peHistory.subList(1, peHistory.size())).get(0)).doubleValue() - pe.doubleValue())) >= PRESSURE_VARIANCE.intValue())).booleanValue()) 
	        cond_7 = Boolean.valueOf(Math.abs((UTIL.NumberToReal(new ArrayList(pdHistory.subList(1, pdHistory.size())).get(0)).doubleValue() - pd.doubleValue())) >= PRESSURE_VARIANCE.intValue());
	      if (cond_7.booleanValue()) 
	        return failed();
	      if (Math.abs((UTIL.NumberToReal(new ArrayList(tHistory.subList(1, tHistory.size())).get(0)).doubleValue() - t.doubleValue())) >= TEMPERATURE_VARIANCE.intValue()) 
	        return failed();
	      return Boolean.TRUE;
	    }
	    finally {
	      sentinel.leaving(((SensorSentinel)sentinel).checkVariance);
	    }
	  }
// ***** VDMTOOLS END Name=checkVariance


// ***** VDMTOOLS START Name=pre_checkVariance KEEP=NO
  private Boolean pre_checkVariance () throws CGException {
    Boolean varRes_1 = null;
    Boolean var1_2 = null;
    if ((var1_2 = Boolean.valueOf(peHistory.size() > 1)).booleanValue()) 
      var1_2 = Boolean.valueOf(pdHistory.size() > 1);
    if ((varRes_1 = var1_2).booleanValue()) 
      varRes_1 = Boolean.valueOf(tHistory.size() > 1);
    return varRes_1;
  }
// ***** VDMTOOLS END Name=pre_checkVariance


// ***** VDMTOOLS START Name=afterFail KEEP=NO
  public void afterFail () throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).afterFail);
    try {
      if (!this.pre_afterFail().booleanValue()) 
        UTIL.RunTime("Precondition failure in afterFail");
      history = new ArrayList(history.subList(1, history.size()));
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
      {
        List atom_1_5 = null;
        List tmpSeq_7 = new ArrayList();
        tmpSeq_7.add(new quotes.FAILED());
        atom_1_5 = new ArrayList(tmpSeq_7);
        atom_1_5.addAll(history);
        final List atom_1 = atom_1_5;
        final Number atom_2 = new Integer(fails.intValue() + 1);
        history = UTIL.ConvertToList(UTIL.clone(atom_1));
        fails = UTIL.NumberToInt(UTIL.clone(atom_2));
      }
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).afterFail);
    }
  }
// ***** VDMTOOLS END Name=afterFail


// ***** VDMTOOLS START Name=pre_afterFail KEEP=NO
  public Boolean pre_afterFail () throws CGException {
    return Boolean.valueOf(fails.intValue() <= 1);
  }
// ***** VDMTOOLS END Name=pre_afterFail


// ***** VDMTOOLS START Name=failed KEEP=NO
  private Boolean failed () throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).failed);
    try {
      if (!this.pre_failed().booleanValue()) 
        UTIL.RunTime("Precondition failure in failed");
      history = new ArrayList(history.subList(1, history.size()));
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
      {
        List atom_1_5 = null;
        List tmpSeq_7 = new ArrayList();
        tmpSeq_7.add(new quotes.FAILED());
        atom_1_5 = new ArrayList(tmpSeq_7);
        atom_1_5.addAll(history);
        final List atom_1 = atom_1_5;
        final Number atom_2 = new Integer(fails.intValue() + 1);
        history = UTIL.ConvertToList(UTIL.clone(atom_1));
        fails = UTIL.NumberToInt(UTIL.clone(atom_2));
      }
      if (!this.inv_Sensor().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Sensor");
      return Boolean.FALSE;
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).failed);
    }
  }
// ***** VDMTOOLS END Name=failed


// ***** VDMTOOLS START Name=pre_failed KEEP=NO
  private Boolean pre_failed () throws CGException {
    return Boolean.valueOf(fails.intValue() <= 1);
  }
// ***** VDMTOOLS END Name=pre_failed


// ***** VDMTOOLS START Name=meanT KEEP=NO
  private Number meanT () throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).meanT);
    try {
      if (tHistory.size() == 0) 
        return OMISSION;
      else 
        return new Double(sumT(new ArrayList(tHistory.subList(1, tHistory.size())), new ArrayList(history.subList(1, history.size()))).doubleValue() / UTIL.NumberToInt(numElems(new ArrayList(history.subList(1, history.size())), new quotes.OK())).doubleValue());
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).meanT);
    }
  }
// ***** VDMTOOLS END Name=meanT


// ***** VDMTOOLS START Name=sumT#2|List|List KEEP=NO
  private Number sumT (final List te, final List res) throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).sumT);
    try {
      if (!this.pre_sumT(te, res).booleanValue()) 
        UTIL.RunTime("Precondition failure in sumT");
      Boolean cond_3 = null;
      if (!(cond_3 = Boolean.valueOf(te.size() == 0)).booleanValue()) 
        cond_3 = Boolean.valueOf(!UTIL.equals(res.get(0), new quotes.OK()));
      if (cond_3.booleanValue()) 
        return new Integer(0);
      else 
        return new Double(UTIL.NumberToReal(te.get(0)).doubleValue() + sumPe(new ArrayList(te.subList(1, te.size())), new ArrayList(res.subList(1, res.size()))).doubleValue());
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).sumT);
    }
  }
// ***** VDMTOOLS END Name=sumT#2|List|List


// ***** VDMTOOLS START Name=pre_sumT#2|List|List KEEP=NO
  private Boolean pre_sumT (final List te, final List res) throws CGException {
    return Boolean.valueOf(te.size() == res.size());
  }
// ***** VDMTOOLS END Name=pre_sumT#2|List|List


// ***** VDMTOOLS START Name=meanPd KEEP=NO
  private Number meanPd () throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).meanPd);
    try {
      if (pdHistory.size() == 0) 
        return OMISSION;
      else 
        return new Double(sumPd(new ArrayList(pdHistory.subList(1, pdHistory.size())), new ArrayList(history.subList(1, history.size()))).doubleValue() / UTIL.NumberToInt(numElems(new ArrayList(history.subList(1, history.size())), new quotes.OK())).doubleValue());
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).meanPd);
    }
  }
// ***** VDMTOOLS END Name=meanPd


// ***** VDMTOOLS START Name=sumPd#2|List|List KEEP=NO
  private Number sumPd (final List d, final List res) throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).sumPd);
    try {
      if (!this.pre_sumPd(d, res).booleanValue()) 
        UTIL.RunTime("Precondition failure in sumPd");
      Boolean cond_3 = null;
      if (!(cond_3 = Boolean.valueOf(d.size() == 0)).booleanValue()) 
        cond_3 = Boolean.valueOf(!UTIL.equals(res.get(0), new quotes.OK()));
      if (cond_3.booleanValue()) 
        return new Integer(0);
      else 
        return new Double(UTIL.NumberToReal(d.get(0)).doubleValue() + sumPe(new ArrayList(d.subList(1, d.size())), new ArrayList(res.subList(1, res.size()))).doubleValue());
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).sumPd);
    }
  }
// ***** VDMTOOLS END Name=sumPd#2|List|List


// ***** VDMTOOLS START Name=pre_sumPd#2|List|List KEEP=NO
  private Boolean pre_sumPd (final List d, final List res) throws CGException {
    return Boolean.valueOf(d.size() == res.size());
  }
// ***** VDMTOOLS END Name=pre_sumPd#2|List|List


// ***** VDMTOOLS START Name=meanPe KEEP=NO
  private Number meanPe () throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).meanPe);
    try {
      if (peHistory.size() == 0) 
        return OMISSION;
      else 
        return new Double(sumPe(new ArrayList(peHistory.subList(1, peHistory.size())), new ArrayList(history.subList(1, history.size()))).doubleValue() / UTIL.NumberToInt(numElems(new ArrayList(history.subList(1, history.size())), new quotes.OK())).doubleValue());
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).meanPe);
    }
  }
// ***** VDMTOOLS END Name=meanPe


// ***** VDMTOOLS START Name=sumPe#2|List|List KEEP=NO
  private Number sumPe (final List e, final List res) throws CGException {
    sentinel.entering(((SensorSentinel)sentinel).sumPe);
    try {
      if (!this.pre_sumPe(e, res).booleanValue()) 
        UTIL.RunTime("Precondition failure in sumPe");
      Boolean cond_3 = null;
      if (!(cond_3 = Boolean.valueOf(e.size() == 0)).booleanValue()) 
        cond_3 = Boolean.valueOf(!UTIL.equals(res.get(0), new quotes.OK()));
      if (cond_3.booleanValue()) 
        return new Integer(0);
      else 
        return new Double(UTIL.NumberToReal(e.get(0)).doubleValue() + sumPe(new ArrayList(e.subList(1, e.size())), new ArrayList(res.subList(1, res.size()))).doubleValue());
    }
    finally {
      sentinel.leaving(((SensorSentinel)sentinel).sumPe);
    }
  }
// ***** VDMTOOLS END Name=sumPe#2|List|List


// ***** VDMTOOLS START Name=pre_sumPe#2|List|List KEEP=NO
  private Boolean pre_sumPe (final List e, final List res) throws CGException {
    return Boolean.valueOf(e.size() == res.size());
  }
// ***** VDMTOOLS END Name=pre_sumPe#2|List|List


// ***** VDMTOOLS START Name=lastN#2|List|Number KEEP=NO
  private List lastN (final List history_1, final Number n) throws CGException {
    if (!this.pre_lastN(history_1, n).booleanValue()) 
      UTIL.RunTime("Precondition failure in lastN");
    List varRes_3 = null;
    int from_7 = (int)Math.max(0, 0);
    int to_8 = (int)Math.min(n.doubleValue(), history_1.size());
    if (from_7 > to_8) 
      varRes_3 = new ArrayList();
    else 
      varRes_3 = new ArrayList(history_1.subList(from_7, to_8));
    return varRes_3;
  }
// ***** VDMTOOLS END Name=lastN#2|List|Number


// ***** VDMTOOLS START Name=pre_lastN#2|List|Number KEEP=NO
  private Boolean pre_lastN (final List history_1, final Number n) throws CGException {
    Boolean varRes_3 = null;
    if ((varRes_3 = Boolean.valueOf(history_1.size() >= n.intValue())).booleanValue()) 
      varRes_3 = Boolean.valueOf(n.intValue() >= 1);
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_lastN#2|List|Number


// ***** VDMTOOLS START Name=allEqual#1|List KEEP=NO
  private Boolean allEqual (final List last) throws CGException {
    if (!this.pre_allEqual(last).booleanValue()) 
      UTIL.RunTime("Precondition failure in allEqual");
    return Boolean.valueOf(new HashSet(last).size() == 1);
  }
// ***** VDMTOOLS END Name=allEqual#1|List


// ***** VDMTOOLS START Name=pre_allEqual#1|List KEEP=NO
  private Boolean pre_allEqual (final List last) throws CGException {
    return Boolean.valueOf(last.size() >= 1);
  }
// ***** VDMTOOLS END Name=pre_allEqual#1|List


// ***** VDMTOOLS START Name=numElems#2|List|Object KEEP=NO
  private Number numElems (final List s, final Object e) throws CGException {
    Number varRes_3 = null;
    if (s.size() == 0) 
      varRes_3 = new Integer(0);
    else if (UTIL.equals((Object)s.get(0), e)) 
      varRes_3 = new Integer(1 + UTIL.NumberToInt(numElems(new ArrayList(s.subList(1, s.size())), e)).intValue());
    else 
      varRes_3 = UTIL.NumberToInt(numElems(new ArrayList(s.subList(1, s.size())), e));
    return varRes_3;
  }
// ***** VDMTOOLS END Name=numElems#2|List|Object


// ***** VDMTOOLS START Name=numOks#1|List KEEP=NO
  private Number numOks (final List res) throws CGException {
    Number varRes_2 = null;
    if (res.size() == 0) 
      varRes_2 = new Integer(0);
    else if (UTIL.equals(res.get(0), new quotes.OK())) 
      varRes_2 = new Integer(1 + numOks(new ArrayList(res.subList(1, res.size()))).intValue());
    else 
      varRes_2 = numOks(new ArrayList(res.subList(1, res.size())));
    return varRes_2;
  }
// ***** VDMTOOLS END Name=numOks#1|List

}
;
